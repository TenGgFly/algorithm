/****************************************************************************************************
1、寻找峰值
  峰值元素是指其值大于左右相邻值的元素。
  给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。
  数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。
  你可以假设 nums[-1] = nums[n] = -∞。
  示例 1:
    输入: nums = [1,2,3,1]
    输出: 2
  解释: 3 是峰值元素，你的函数应该返回其索引 2。

  示例 2:
    输入: nums = [1,2,1,3,5,6,4]
    输出: 1 或 5 
  解释: 你的函数可以返回索引 1，其峰值元素为 2；或者返回索引 5， 其峰值元素为 6。
     
  说明:
    你的解法应该是 O(logN) 时间复杂度的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-peak-element
****************************************************************************************************/

最开始是照着提示的思路进行，中规中矩，用时64ms
 /** 
* @param {number[]} nums 
* @return {number} 
*/
var findPeakElement = function(nums) {　　
　　let i=0;
　　let j=nums.length-1;
　　let nums[-1]=nums[0]-1;
　　let nums[nums.length]=nums[nums.length-1]-1;
　　if(j===0) return 0;
　　else if(j===1) return nums[0]>nums[1] ? 0 : 1;
　　else{
　　　　while(i<=j){
　　　　　　if(nums[i]>nums[i-1] && nums[i]>nums[i+1]){
　　　　　　　　return i;
　　　　　　}else{
　　　　　　　　i++
　　　　　　}
　　　　　　if(nums[j]>nums[j-1] && nums[j]>nums[j+1]){
　　　　　　　　return j;
　　　　　　}else{
　　　　　　　　j--;
　　　　　　}
   　　 }
　　}
};

然后想着优化，对着一个数组反复琢磨，发现一个规律：

　　nums.length=0,1,2不谈，从nums.length>3开始，i=0，如果nums[i]>nums[i+1]，直接得出第一个峰值；如果nums[i]<nums[i+1]则说明nums[i]不是峰值，而这恰恰就是关键，既然nums[i]不是峰值，必然有nums[i+1]>nums[i]，那么当i=2的时候，就可以省略一次比较了，优化如下：

 /** 
* @param {number[]} nums 
* @return {number} 
*/
var findPeakElement = function(nums) {　　
　　let i=0;
　　let j=nums.length-1;
　　if(j===0) return 0;
　　else if(j===1) return nums[0]>nums[1] ? 0 : 1;
　　else{
　　　　while(i<=j){
　　　　　　if(nums[i]>nums[i+1]){
　　　　　　　　return i;
　　　　　　}else{
　　　　　　　　i++
　　　　　　}
　　　　　　if(nums[j]>nums[j-1]){
　　　　　　　　return j;
　　　　　　}else{
　　　　　　　　j--;
　　　　　　}
   　　 }
　　}
};

不错了，用时60ms，那么还可以继续优化吗?
当然可以，在运行过程中，碰到return就直接结束了，那么不需要那么多的if-else

/**
 * @param {number[]} nums
 * @return {number}
 */
var findPeakElement = function(nums) {
    let i=0;
    let j=nums.length-1;
    if(j===0) return 0;
    if(j===1) return nums[0]>nums[1] ? 0 : 1;
    while(i<=j){
        if(nums[i]>nums[i+1]){
            return i;
        }
        else{
            if(nums[j]>nums[j-1]){
                return j;
            }
            i++;
            j--;
        }        
    }    
};

用时52ms，到此优化结束

